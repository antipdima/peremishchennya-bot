from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)
import nest_asyncio
import asyncio

# –°—Ç–∞–Ω–∏ –¥—ñ–∞–ª–æ–≥—É
PHOTO, RECEIVER, CENTER, PHONE = range(4)
TARGET_CHAT_ID = -1002152321701  # ID —Ü—ñ–ª—å–æ–≤–æ–≥–æ —á–∞—Ç—É

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì∑ –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:")
    return PHOTO

# –§–æ—Ç–æ
async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1].file_id
    context.user_data['photo'] = photo
    await update.message.reply_text("üë§ –ö–æ–º—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è? (–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª–∏)")
    return RECEIVER

# –û—Ç—Ä–∏–º—É–≤–∞—á
async def get_receiver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['receiver'] = update.message.text
    context.user_data['centers'] = []

    keyboard = [
        [KeyboardButton("–†–¶–ö")],
        [KeyboardButton("–†–¶–õ")],
        [KeyboardButton("–†–¶–í")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üè¢ –ö—É–¥–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è? –û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–∞ –†–¶.\n"
        "–ö–æ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å *–ì–æ—Ç–æ–≤–æ*.",
        reply_markup=reply_markup
    )
    return CENTER

# –¶–µ–Ω—Ç—Ä–∏
async def get_center(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.upper()
    valid_centers = {"–†–¶–ö", "–†–¶–õ", "–†–¶–í"}

    if text == "–ì–û–¢–û–í–û":
        if not context.user_data["centers"]:
            await update.message.reply_text("‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –æ–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –†–¶.")
            return CENTER
        request_contact_button = KeyboardButton("üìû –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä", request_contact=True)
        reply_markup = ReplyKeyboardMarkup([[request_contact_button]], one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("üì± –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=reply_markup)
        return PHONE

    elif text in valid_centers:
        if text not in context.user_data["centers"]:
            context.user_data["centers"].append(text)
        return CENTER

    else:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –†–¶ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ì–æ—Ç–æ–≤–æ'")
        return CENTER

# –¢–µ–ª–µ—Ñ–æ–Ω
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone_number = update.message.contact.phone_number if update.message.contact else update.message.text
    context.user_data["phone"] = phone_number

    caption = (
        f"üì¶ *–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è*\n"
        f"üë§ –û—Ç—Ä–∏–º—É–≤–∞—á: {context.user_data['receiver']}\n"
        f"üè¢ –†–¶: {', '.join(context.user_data['centers'])}\n"
        f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {context.user_data['phone']}"
    )

    await context.bot.send_photo(
        chat_id=TARGET_CHAT_ID,
        photo=context.user_data["photo"],
        caption=caption,
        parse_mode="Markdown"
    )
    await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async def main():
    application = ApplicationBuilder().token("7852735303:AAFydrs-NvtHZwMc9ztWKRyWZgP7HaBNsv4").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PHOTO: [MessageHandler(filters.PHOTO, get_photo)],
            RECEIVER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_receiver)],
            CENTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_center)],
            PHONE: [
                MessageHandler(filters.CONTACT, get_phone),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    await application.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())

